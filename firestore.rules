rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only read and update their own profile.
    // Creation is handled by server-side logic (Firebase Auth triggers or admin actions).
    // Deletion is handled by server-side logic.
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create, delete: if false; // Prevent client-side creation/deletion
    }

    // Allow any authenticated user to read and write to these collections.
    // This is a permissive rule for simplicity in the internal tool.
    // For higher security, you could restrict writes to specific roles (e.g., 'Admin', 'Supervisor').
    match /work-orders/{docId} {
      allow read, write: if request.auth != null;
    }
    match /ot-categories/{docId} {
      allow read, write: if request.auth != null;
    }
     match /ot-statuses/{docId} {
      allow read, write: if request.auth != null;
    }
    match /services/{docId} {
      allow read, write: if request.auth != null;
    }
    match /collaborators/{docId} {
      allow read, write: if request.auth != null;
    }
    match /vehicles/{docId} {
      allow read, write: if request.auth != null;
    }
    match /gantt-charts/{docId} {
      allow read, write: if request.auth != null;
    }
    match /suggested-tasks/{docId} {
      allow read, write: if request.auth != null;
    }
    match /report-templates/{docId} {
      allow read, write: if request.auth != null;
    }
     match /submitted-reports/{docId} {
      allow read, write: if request.auth != null;
    }

    // Company info can be read by anyone authenticated, but only written by an Admin role.
    match /settings/companyInfo {
       allow read: if request.auth != null;
       allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }
  }
}